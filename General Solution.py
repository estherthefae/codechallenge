# CODE CHALLENGE
# 6TH DECEMBER, 2021

"""
*1. YeePaa*
*Intro:* If we list out all the natural numbers from 1 to 15, the multiples of 3 will be 3, 6, 9, 12, 15  are while the multiples of 5 will be 5, 10 and 15.

*Problem:* Write a simple Program to take an input "X" and list vertically on the screen all natural numbers from 1 to X. In front of each number, if it's a multiple of 3, put *"Yee"*; if it's a multiple of 5, put *"Paa"* and if it's both a multiple 3 & 5, out *"Yee-Paa"*. Input validation - X can only be a positive integer greater than or equal to 10.
"""

print("\nNumber 1")
x = int(input("Enter amount of numbers: "))
if x < 10:
    x = int(input("Wrong input\nEnter number: "))
print("Numbers within range")
for i in range(1, x+1):
    if (i%3 == 0 and i%5 == 0):
        print(i, "Yee-Paa")
    elif (i%3 == 0 and i%5 != 0):
        print(i, "Yee")
    elif (i%3 != 0 and i%5 == 0):
        print(i, "Paa")
    else:
        print(i)



"""
*2. Fibonacci*
*Intro:* Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 0 and 1, the first 7 terms will be: 0 1 1 2 3 5 8

*Problem:* Write a Program to input an integer *X*, and list out the first X terms of the Fibonacci Sequence
"""

print("\nNumber 2")
a = 0
b = 1
nterms = int(input("Enter no of terms: "))
count = 0
while count < nterms:
    print(a)
    count = count + 1
    if count < nterms:
        print(b)
        a = a+b
        b = b+a
        count = count + 1


        
"""
3. Sum of Primes*
*Intro:* The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

*Problem:* Write a program to find the sum of all the primes below one million.
"""

print("\nNumber 3")
def prime(x):
    if x == 1:
        return False
    top = [2, 3, 5, 7]
    result = []
    if x in top:
        return True
    else:
        for i in top:
            if x%i == 0 and x not in top:
                return False
        return True
summation = 0
for i in range(1, 1000000, 2):
    if prime(i) is True:
        summation = summation + i
print("Sum of prime numbers between 1 and 1 million: ", summation)




"""
*4. 1000 Bulbs*
*Intro:* There are 1000 light bulbs and 1000 persons. All light bulbs are initially off. Person 1 goes flipping light bulb 1, 2, 3, 4, … person 2 then flips 2, 4, 6, 8, … person 3 then 3, 6, 9, … etc until all 1000 persons have done this. 

*Problem:*
*a.* What is the status of light bulb 25, 93, 576, 132, 605, 26, 45, 37, 36 after all persons have flipped their respective light bulbs? 
*b.* Is there a general solution to predict the status of a light bulb? 
*c.* How many light bulbs are on after all 1000 persons have gone by?
"""

print("\nNumber 4")
import math
"""
def isperfect(x):
    if math.pow(int(math.sqrt(x)), 2) == x:
        return True
    else:
        return False
count = 0
for i in range( 1, 1000):
    if isperfect(i):
        count = count + 1
"""
print("There are ", int(math.sqrt(1000)), "light bulbs on")



"""
*5. Numbers Conversion*
*intro:* If you converted numbers to words, then:

-1050 _will be:_ minus one thousand and fifty

2659917 _will be:_ two million, six hundred and fifty nine thousand, nine hundred and seventeen

*Problem:* Write a Program that will convert any integer to words - the commas and all - with a range from minus 1 quintillion to plus  1 quintillion.
"""

print("\nNumber 5")
def converter(x):
    numdict = {"1":["one"], "2":["two", "twenty"], "3":["three", "thirty"], "4":["four", "forty"], "5":["five", "fifty"], "6":["six", "sixty"], "7":["seven", "seventy"], "8":["eight", "eighty"], "9":["nine", "ninty"], "10": ["ten"], "11":["eleven"], "12":["twelve"], "13": ["thirteen"], "14":["fourteen"], "15": ["fifteen"], "16":["sixteen"], "17":["seventeen"], "18":["eighteen"], "19":["nineteen"]}
    x = x.lstrip("0")
    if x == "":
        return "0"
    if len(x) <= 2 and x in numdict:
        return ("and " + numdict[x][0])
    elif len(x) == 2 and x not in numdict:
        if x[-1] == "0":
            return ("and " + numdict[x[0]][1])
        else:
            return ("and " + numdict[x[0]][1] + " " + numdict[x[1]][0])

    elif len(x) == 3:
        if x[1:] in numdict or (x[1] == "0" and x[-1] != "0"):
            return (numdict[x[0]][0] + " hundred and " + numdict[x[1:].lstrip("0")][0])
        elif x[1:] not in numdict:
            if x[-1] == "0":
                if x[1] != "0":
                    return (numdict[x[0]][0] + " hundred and " + numdict[x[1]][1])
                else:
                    return (numdict[x[0]][0] + " hundred ")
            else:
                return (numdict[x[0]][0] + " hundred and " + numdict[x[1]][1] + " " + numdict[x[2]][0])
def seperator(num):
    x = num
    x = x.replace(",", "")
    x = x.strip(" - ")
    if len(x)%3 == 1:
        x = "00" + x
    elif len(x)%3 == 2:
        x = "0" + x
    if len(x) == 3:
        result = converter(x)
    elif len(x) > 3:
        xsplit = []
        for i in range(0, len(x), 3):
            xsplit.append(x[i: i + 3])
        if len(xsplit) == 2:
            result = converter(xsplit[0]) + " thousand, " + converter(xsplit[1]) 
        elif len(xsplit) == 3:
            result = (converter(xsplit[0]) + " million, " + converter(xsplit[1]) + " thousand, " + converter(xsplit[2]))  
        elif len(xsplit) == 4:
            result = (converter(xsplit[0]) + " billion, " + converter(xsplit[1]) + " million, " + converter(xsplit[2]) + " thousand, " + converter(xsplit[3]))
        elif len(xsplit) == 5:
            result = (converter(xsplit[0]) + " trillion," + converter(xsplit[1]) + " billion, " + converter(xsplit[2]) + " million, " + converter(xsplit[3]) + " thousand, " + converter(xsplit[4]))
        elif len(xsplit) == 6:
            result = (converter(xsplit[0]) + " quadrillion," + converter(xsplit[1]) + " trillion," + converter(xsplit[2]) + " billion, " + converter(xsplit[3]) + " million, " + converter(xsplit[4]) + " thousand, " + converter(xsplit[5]))
        elif len(xsplit) == 7:
            result = (converter(xsplit[0]) + " quintillion," +converter(xsplit[1]) + " quadrillion," + converter(xsplit[2]) + " trillion," + converter(xsplit[3]) + " billion, " + converter(xsplit[4]) + " million, " + converter(xsplit[5]) + " thousand, " + converter(xsplit[6]))
    return check(num, result)
def check (x, result):
    bug = ["0 quadrillion,", "0 million,", "0 billion,", "0 trillion,", " 0 thousand,"]
    for i in bug:
        if i in result:
            result = result.replace(i, "")
    result = result.replace("  ", " ")
    result = result.replace(", and", " and ")
    result = result.rstrip(", 0")
    if result[0:3] == "and" and result[4] in ["a", "n", "d"]:
        result = result[4] + result.lstrip("and ")
    else:
        result = result.lstrip("and ")
    if x[0] == "-":
        result = "minus " + result
    return result
    
    
again = "yes"
while again == "yes":
    number = input("Enter the number in figures: ")
    print(number + " in words: " + seperator(number))
    again = input("Do you want to try again: " ).lower()
    

    
"""
*6. Circular Prime*
*Intro:* The number, 197, is called a circular prime because all rotations of the digits: 197, 971, and 719, are themselves prime.

There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.

*Problem:* How many circular primes are there below one million?
"""

print("\nNumber 6")
def circular(x):
    if prime(x):
        cir = []
        length = len(str(x))
        if length == 1:
            cir.append(x) 
        else:
            num = x
            count = 0
            while count < length - 1:
                rem = num%10
                num = str(rem) + str(num)
                num = num[0:length]
                num = int(num)
                cir.append(num)
                count = count + 1
        
        for i in cir:
            if prime(i) == False:
                return False
            return True
    return False
circular_prime = 0
for i in range(1, 1000000):
    if circular(i):
        circular_prime = circular_prime + 1
print("Number of circular primes below a million: ", circular_prime)



"""
*7. Number Letter Counts*
*intro:* If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.

*Problem:* If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?

*Note:* Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of "and" when writing out numbers is in compliance with British usage.
"""

print("\nNumber 7")
count = 0
for i in range(1, 1001):
    i = str(i)
    solution = seperator(i)
    solution = (solution.replace(" ", "")).replace(",", "")
    count = count + len(solution)
print("Number Letter Count from 1 to 1000: ", count)

        
        
        
        
        
        
        
        
        
        
        
        
        
        
